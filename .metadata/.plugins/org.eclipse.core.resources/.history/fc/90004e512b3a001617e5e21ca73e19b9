/**
 * @author Steven Cassidy
 * Date: 5/27/16
 * Purpose: To create a MagicSquare class that tests if a Square is a MagicSquare 
 */
public class MagicSquare extends Square 
{
	private boolean isMagic;
	private final int MAGIC_NUMBER = this.getMagicNumber(); //The number all rows columns and diagonals must add up to in order for the square to be magic
	
	/**
	 *  call the  of the super class and set isMagic to true or false depending on if it is a MagicSquare
	 */
	public MagicSquare(int side)
	{
		super(side);
		isMagic = this.testIfMagic();
	}
	
	public int getMagicNumber()
	{
		int number = 0;
		for(int num = 1;num <= (int)(Math.pow(super.getSideLength(), 2));num++)
		{
			number += num;
		}
		number /= super.getSideLength();
		return number;
	}
	
	/**
	 * Get the some of the first row
	 * @return the sum
	 */
	public int getRowOneSum()
	{
		int rowOneSum =0;
		for(int col = 0; col< super.getSquare()[0].length;col++)
		{
			rowOneSum  += super.getSquare()[0][col];
		}
		return rowOneSum;
		
	}
	
	/**
	 * Get the some of the second row
	 * @return the sum
	 */
	public int getRowTwoSum()
	{
		int rowTwoSum =0;
		for(int col = 0; col<super.getSquare()[1].length;col++)
		{
			rowTwoSum  += super.getSquare()[1][col];
		}
		return rowTwoSum;
		
	}
	
	/**
	 * Get the some of the third row
	 * @return the sum
	 */
	public int getRowThreeSum()
	{
		int rowThreeSum =0;
		for(int col = 0; col<super.getSquare()[2].length;col++)
		{
			rowThreeSum  += super.getSquare()[2][col];
		}
		return rowThreeSum;
		
	}
	
	/**
	 * Get the some of the forth row
	 * @return the sum
	 */
	public int getRowFourSum()
	{
		int rowFourSum =0;
		for(int col = 0; col<super.getSquare()[3].length;col++)
		{
			rowFourSum  += super.getSquare()[3][col];
		}
		return rowFourSum;
		
	}
	
	/**
	 * Get the some of the first column
	 * @return the sum
	 */
	public int getColOneSum()
	{
		int colOneSum =0;
		for(int row = 0;row < super.getSquare()[0].length;row++)
		{
			colOneSum += super.getSquare()[row][0];
		}
		return colOneSum;
	}
	
	/**
	 * Get the some of the second column
	 * @return the sum
	 */
	public int getColTwoSum()
	{
		int colTwoSum =0;
		for(int row = 0;row < super.getSquare()[1].length;row++)
		{
			colTwoSum += super.getSquare()[row][1];
		}
		return colTwoSum;
	}
	/**
	 * Get the some of the third column
	 * @return the sum
	 */
	public int getColThreeSum()
	{
		int colThreeSum =0;
		for(int row = 0;row < super.getSquare()[2].length;row++)
		{
			colThreeSum += super.getSquare()[row][2];
		}
		return colThreeSum;
	}
	/**
	 * Get the some of the forth column
	 * @return the sum
	 */
	public int getColFourSum()
	{
		int colFourSum =0;
		for(int row = 0;row < super.getSquare()[3].length;row++)
		{
			colFourSum += super.getSquare()[row][3];
		}
		return colFourSum;
	}
	
	/**
	 * Get the some of the left diagonal
	 * @return the sum
	 */
	public int getLeftDiagonalSum()
	{
		int leftDiagonalSum = 0;
		for(int index = 0;index < super.getSquare().length;index++)
		{
			leftDiagonalSum += super.getSquare()[index][index];
		}
		return leftDiagonalSum;
	}
	
	/**
	 * Get the some of the right diagonal
	 * @return the sum
	 */
	public int getRightDiagonalSum()
	{
		int rightDiagonalSum = 0;
		int col = 3;
		for(int row = 0;row < super.getSquare()[0].length;row++)
		{
			rightDiagonalSum += super.getSquare()[row][col];
			col--;
		}
		return rightDiagonalSum;
	}
	/**
	 * test if the Square is a MagicSquare
	 * @return true or false depending on if the square is magic
	 */
	public boolean testIfMagic()
	{
		boolean rows = false;
		boolean cols = false;
		boolean diagonals = false;
		
		if(getRowOneSum() == MAGIC_NUMBER && getRowTwoSum() == MAGIC_NUMBER && getRowThreeSum() == MAGIC_NUMBER && getRowFourSum() == MAGIC_NUMBER)
		{
			rows = true;
		}
		
		if(getColOneSum() == MAGIC_NUMBER && getColTwoSum() == MAGIC_NUMBER && getColThreeSum() == MAGIC_NUMBER && getColFourSum() == MAGIC_NUMBER)
		{
			cols = true;
		}
		if(getLeftDiagonalSum() == MAGIC_NUMBER && getRightDiagonalSum() == MAGIC_NUMBER)
		{
			diagonals = true;
		}
		if(rows && cols && diagonals)
		{
			return true;
		}
		return false;
		
	}
	
	/**
	 * get isMagic
	 * @return isMagic
	 */
	public boolean getIsMagic() 
	{
		return isMagic;
	}
	
	/**
	 * Create a String representation of a MagicSquare object
	 * @return Square's toString plus the message
	 */
	public String toString()
	{
		String message = "";
		
		if(isMagic)
		{
			message = "Congradulations all sums add up to " + MAGIC_NUMBER + " your square is magic!";
		}
		else
		{
			message = "Sorry all sums do not add up to " + MAGIC_NUMBER + " your square is not magic!";
		}
		return super.toString() + message;
	}
	
}